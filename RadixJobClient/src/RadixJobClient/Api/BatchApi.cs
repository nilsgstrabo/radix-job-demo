/*
 * Radix job scheduler server.
 *
 * This is the API Server for the Radix job scheduler server.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using RadixJobClient.Client;
using RadixJobClient.Model;

namespace RadixJobClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create batch
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchCreation">Batch to create</param>
        /// <returns>BatchStatus</returns>
        BatchStatus CreateBatch(BatchScheduleDescription batchCreation);

        /// <summary>
        /// Create batch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchCreation">Batch to create</param>
        /// <returns>ApiResponse of BatchStatus</returns>
        ApiResponse<BatchStatus> CreateBatchWithHttpInfo(BatchScheduleDescription batchCreation);
        /// <summary>
        /// Delete batch
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchName">Name of batch</param>
        /// <returns>Status</returns>
        Status DeleteBatch(string batchName);

        /// <summary>
        /// Delete batch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchName">Name of batch</param>
        /// <returns>ApiResponse of Status</returns>
        ApiResponse<Status> DeleteBatchWithHttpInfo(string batchName);
        /// <summary>
        /// Gets batch
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchName">Name of batch</param>
        /// <returns>BatchStatus</returns>
        BatchStatus GetBatch(string batchName);

        /// <summary>
        /// Gets batch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchName">Name of batch</param>
        /// <returns>ApiResponse of BatchStatus</returns>
        ApiResponse<BatchStatus> GetBatchWithHttpInfo(string batchName);
        /// <summary>
        /// Gets batches
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;BatchStatus&gt;</returns>
        List<BatchStatus> GetBatches();

        /// <summary>
        /// Gets batches
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;BatchStatus&gt;</returns>
        ApiResponse<List<BatchStatus>> GetBatchesWithHttpInfo();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create batch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchCreation">Batch to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchStatus</returns>
        System.Threading.Tasks.Task<BatchStatus> CreateBatchAsync(BatchScheduleDescription batchCreation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create batch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchCreation">Batch to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchStatus>> CreateBatchWithHttpInfoAsync(BatchScheduleDescription batchCreation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete batch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchName">Name of batch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Status</returns>
        System.Threading.Tasks.Task<Status> DeleteBatchAsync(string batchName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete batch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchName">Name of batch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Status)</returns>
        System.Threading.Tasks.Task<ApiResponse<Status>> DeleteBatchWithHttpInfoAsync(string batchName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets batch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchName">Name of batch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchStatus</returns>
        System.Threading.Tasks.Task<BatchStatus> GetBatchAsync(string batchName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets batch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchName">Name of batch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchStatus>> GetBatchWithHttpInfoAsync(string batchName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets batches
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BatchStatus&gt;</returns>
        System.Threading.Tasks.Task<List<BatchStatus>> GetBatchesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets batches
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BatchStatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BatchStatus>>> GetBatchesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchApi : IBatchApiSync, IBatchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BatchApi : IBatchApi
    {
        private RadixJobClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BatchApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BatchApi(string basePath)
        {
            this.Configuration = RadixJobClient.Client.Configuration.MergeConfigurations(
                RadixJobClient.Client.GlobalConfiguration.Instance,
                new RadixJobClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new RadixJobClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RadixJobClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = RadixJobClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BatchApi(RadixJobClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = RadixJobClient.Client.Configuration.MergeConfigurations(
                RadixJobClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new RadixJobClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RadixJobClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = RadixJobClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BatchApi(RadixJobClient.Client.ISynchronousClient client, RadixJobClient.Client.IAsynchronousClient asyncClient, RadixJobClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = RadixJobClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public RadixJobClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public RadixJobClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RadixJobClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RadixJobClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create batch 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchCreation">Batch to create</param>
        /// <returns>BatchStatus</returns>
        public BatchStatus CreateBatch(BatchScheduleDescription batchCreation)
        {
            RadixJobClient.Client.ApiResponse<BatchStatus> localVarResponse = CreateBatchWithHttpInfo(batchCreation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create batch 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchCreation">Batch to create</param>
        /// <returns>ApiResponse of BatchStatus</returns>
        public RadixJobClient.Client.ApiResponse<BatchStatus> CreateBatchWithHttpInfo(BatchScheduleDescription batchCreation)
        {
            // verify the required parameter 'batchCreation' is set
            if (batchCreation == null)
                throw new RadixJobClient.Client.ApiException(400, "Missing required parameter 'batchCreation' when calling BatchApi->CreateBatch");

            RadixJobClient.Client.RequestOptions localVarRequestOptions = new RadixJobClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RadixJobClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixJobClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = batchCreation;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchStatus>("/batches", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create batch 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchCreation">Batch to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchStatus</returns>
        public async System.Threading.Tasks.Task<BatchStatus> CreateBatchAsync(BatchScheduleDescription batchCreation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RadixJobClient.Client.ApiResponse<BatchStatus> localVarResponse = await CreateBatchWithHttpInfoAsync(batchCreation, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create batch 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchCreation">Batch to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchStatus)</returns>
        public async System.Threading.Tasks.Task<RadixJobClient.Client.ApiResponse<BatchStatus>> CreateBatchWithHttpInfoAsync(BatchScheduleDescription batchCreation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchCreation' is set
            if (batchCreation == null)
                throw new RadixJobClient.Client.ApiException(400, "Missing required parameter 'batchCreation' when calling BatchApi->CreateBatch");


            RadixJobClient.Client.RequestOptions localVarRequestOptions = new RadixJobClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RadixJobClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixJobClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = batchCreation;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchStatus>("/batches", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete batch 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchName">Name of batch</param>
        /// <returns>Status</returns>
        public Status DeleteBatch(string batchName)
        {
            RadixJobClient.Client.ApiResponse<Status> localVarResponse = DeleteBatchWithHttpInfo(batchName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete batch 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchName">Name of batch</param>
        /// <returns>ApiResponse of Status</returns>
        public RadixJobClient.Client.ApiResponse<Status> DeleteBatchWithHttpInfo(string batchName)
        {
            // verify the required parameter 'batchName' is set
            if (batchName == null)
                throw new RadixJobClient.Client.ApiException(400, "Missing required parameter 'batchName' when calling BatchApi->DeleteBatch");

            RadixJobClient.Client.RequestOptions localVarRequestOptions = new RadixJobClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RadixJobClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixJobClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("batchName", RadixJobClient.Client.ClientUtils.ParameterToString(batchName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Status>("/batches/{batchName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete batch 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchName">Name of batch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Status</returns>
        public async System.Threading.Tasks.Task<Status> DeleteBatchAsync(string batchName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RadixJobClient.Client.ApiResponse<Status> localVarResponse = await DeleteBatchWithHttpInfoAsync(batchName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete batch 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchName">Name of batch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Status)</returns>
        public async System.Threading.Tasks.Task<RadixJobClient.Client.ApiResponse<Status>> DeleteBatchWithHttpInfoAsync(string batchName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchName' is set
            if (batchName == null)
                throw new RadixJobClient.Client.ApiException(400, "Missing required parameter 'batchName' when calling BatchApi->DeleteBatch");


            RadixJobClient.Client.RequestOptions localVarRequestOptions = new RadixJobClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RadixJobClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixJobClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("batchName", RadixJobClient.Client.ClientUtils.ParameterToString(batchName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Status>("/batches/{batchName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets batch 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchName">Name of batch</param>
        /// <returns>BatchStatus</returns>
        public BatchStatus GetBatch(string batchName)
        {
            RadixJobClient.Client.ApiResponse<BatchStatus> localVarResponse = GetBatchWithHttpInfo(batchName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets batch 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchName">Name of batch</param>
        /// <returns>ApiResponse of BatchStatus</returns>
        public RadixJobClient.Client.ApiResponse<BatchStatus> GetBatchWithHttpInfo(string batchName)
        {
            // verify the required parameter 'batchName' is set
            if (batchName == null)
                throw new RadixJobClient.Client.ApiException(400, "Missing required parameter 'batchName' when calling BatchApi->GetBatch");

            RadixJobClient.Client.RequestOptions localVarRequestOptions = new RadixJobClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RadixJobClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixJobClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("batchName", RadixJobClient.Client.ClientUtils.ParameterToString(batchName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<BatchStatus>("/batches/{batchName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets batch 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchName">Name of batch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchStatus</returns>
        public async System.Threading.Tasks.Task<BatchStatus> GetBatchAsync(string batchName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RadixJobClient.Client.ApiResponse<BatchStatus> localVarResponse = await GetBatchWithHttpInfoAsync(batchName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets batch 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchName">Name of batch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchStatus)</returns>
        public async System.Threading.Tasks.Task<RadixJobClient.Client.ApiResponse<BatchStatus>> GetBatchWithHttpInfoAsync(string batchName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchName' is set
            if (batchName == null)
                throw new RadixJobClient.Client.ApiException(400, "Missing required parameter 'batchName' when calling BatchApi->GetBatch");


            RadixJobClient.Client.RequestOptions localVarRequestOptions = new RadixJobClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RadixJobClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixJobClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("batchName", RadixJobClient.Client.ClientUtils.ParameterToString(batchName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BatchStatus>("/batches/{batchName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets batches 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;BatchStatus&gt;</returns>
        public List<BatchStatus> GetBatches()
        {
            RadixJobClient.Client.ApiResponse<List<BatchStatus>> localVarResponse = GetBatchesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets batches 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;BatchStatus&gt;</returns>
        public RadixJobClient.Client.ApiResponse<List<BatchStatus>> GetBatchesWithHttpInfo()
        {
            RadixJobClient.Client.RequestOptions localVarRequestOptions = new RadixJobClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RadixJobClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixJobClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<BatchStatus>>("/batches/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBatches", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets batches 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BatchStatus&gt;</returns>
        public async System.Threading.Tasks.Task<List<BatchStatus>> GetBatchesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RadixJobClient.Client.ApiResponse<List<BatchStatus>> localVarResponse = await GetBatchesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets batches 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BatchStatus&gt;)</returns>
        public async System.Threading.Tasks.Task<RadixJobClient.Client.ApiResponse<List<BatchStatus>>> GetBatchesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RadixJobClient.Client.RequestOptions localVarRequestOptions = new RadixJobClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RadixJobClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixJobClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<BatchStatus>>("/batches/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBatches", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
