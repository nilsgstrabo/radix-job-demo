/*
 * Radix job scheduler server.
 *
 * This is the API Server for the Radix job scheduler server.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = RadixJobClient.Client.OpenAPIDateConverter;

namespace RadixJobClient.Model
{
    /// <summary>
    /// RadixNode defines node attributes, where container should be scheduled
    /// </summary>
    [DataContract(Name = "RadixNode")]
    public partial class RadixNode : IEquatable<RadixNode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RadixNode" /> class.
        /// </summary>
        /// <param name="gpu">Gpu Optional. Holds lists of node GPU types, with dashed types to exclude.</param>
        /// <param name="gpuCount">GpuCount Optional. Holds minimum count of GPU on node.</param>
        public RadixNode(string gpu = default(string), string gpuCount = default(string))
        {
            this.Gpu = gpu;
            this.GpuCount = gpuCount;
        }

        /// <summary>
        /// Gpu Optional. Holds lists of node GPU types, with dashed types to exclude
        /// </summary>
        /// <value>Gpu Optional. Holds lists of node GPU types, with dashed types to exclude</value>
        [DataMember(Name = "gpu", EmitDefaultValue = false)]
        public string Gpu { get; set; }

        /// <summary>
        /// GpuCount Optional. Holds minimum count of GPU on node
        /// </summary>
        /// <value>GpuCount Optional. Holds minimum count of GPU on node</value>
        [DataMember(Name = "gpuCount", EmitDefaultValue = false)]
        public string GpuCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RadixNode {\n");
            sb.Append("  Gpu: ").Append(Gpu).Append("\n");
            sb.Append("  GpuCount: ").Append(GpuCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RadixNode);
        }

        /// <summary>
        /// Returns true if RadixNode instances are equal
        /// </summary>
        /// <param name="input">Instance of RadixNode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RadixNode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Gpu == input.Gpu ||
                    (this.Gpu != null &&
                    this.Gpu.Equals(input.Gpu))
                ) && 
                (
                    this.GpuCount == input.GpuCount ||
                    (this.GpuCount != null &&
                    this.GpuCount.Equals(input.GpuCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Gpu != null)
                    hashCode = hashCode * 59 + this.Gpu.GetHashCode();
                if (this.GpuCount != null)
                    hashCode = hashCode * 59 + this.GpuCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
