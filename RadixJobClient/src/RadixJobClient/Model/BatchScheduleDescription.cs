/*
 * Radix job scheduler server.
 *
 * This is the API Server for the Radix job scheduler server.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = RadixJobClient.Client.OpenAPIDateConverter;

namespace RadixJobClient.Model
{
    /// <summary>
    /// BatchScheduleDescription holds description about batch scheduling job
    /// </summary>
    [DataContract(Name = "BatchScheduleDescription")]
    public partial class BatchScheduleDescription : IEquatable<BatchScheduleDescription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchScheduleDescription" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BatchScheduleDescription() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchScheduleDescription" /> class.
        /// </summary>
        /// <param name="defaultRadixJobComponentConfig">defaultRadixJobComponentConfig.</param>
        /// <param name="jobScheduleDescriptions">JobScheduleDescriptions descriptions of jobs to schedule within the batch (required).</param>
        public BatchScheduleDescription(RadixJobComponentConfig defaultRadixJobComponentConfig = default(RadixJobComponentConfig), List<JobScheduleDescription> jobScheduleDescriptions = default(List<JobScheduleDescription>))
        {
            // to ensure "jobScheduleDescriptions" is required (not null)
            if (jobScheduleDescriptions == null) {
                throw new ArgumentNullException("jobScheduleDescriptions is a required property for BatchScheduleDescription and cannot be null");
            }
            this.JobScheduleDescriptions = jobScheduleDescriptions;
            this.DefaultRadixJobComponentConfig = defaultRadixJobComponentConfig;
        }

        /// <summary>
        /// Gets or Sets DefaultRadixJobComponentConfig
        /// </summary>
        [DataMember(Name = "defaultRadixJobComponentConfig", EmitDefaultValue = false)]
        public RadixJobComponentConfig DefaultRadixJobComponentConfig { get; set; }

        /// <summary>
        /// JobScheduleDescriptions descriptions of jobs to schedule within the batch
        /// </summary>
        /// <value>JobScheduleDescriptions descriptions of jobs to schedule within the batch</value>
        [DataMember(Name = "jobScheduleDescriptions", IsRequired = true, EmitDefaultValue = false)]
        public List<JobScheduleDescription> JobScheduleDescriptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BatchScheduleDescription {\n");
            sb.Append("  DefaultRadixJobComponentConfig: ").Append(DefaultRadixJobComponentConfig).Append("\n");
            sb.Append("  JobScheduleDescriptions: ").Append(JobScheduleDescriptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchScheduleDescription);
        }

        /// <summary>
        /// Returns true if BatchScheduleDescription instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchScheduleDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchScheduleDescription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultRadixJobComponentConfig == input.DefaultRadixJobComponentConfig ||
                    (this.DefaultRadixJobComponentConfig != null &&
                    this.DefaultRadixJobComponentConfig.Equals(input.DefaultRadixJobComponentConfig))
                ) && 
                (
                    this.JobScheduleDescriptions == input.JobScheduleDescriptions ||
                    this.JobScheduleDescriptions != null &&
                    input.JobScheduleDescriptions != null &&
                    this.JobScheduleDescriptions.SequenceEqual(input.JobScheduleDescriptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultRadixJobComponentConfig != null)
                    hashCode = hashCode * 59 + this.DefaultRadixJobComponentConfig.GetHashCode();
                if (this.JobScheduleDescriptions != null)
                    hashCode = hashCode * 59 + this.JobScheduleDescriptions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
