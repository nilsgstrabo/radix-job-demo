/*
 * Radix job scheduler server.
 *
 * This is the API Server for the Radix job scheduler server.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using RadixJobServer.Converters;

namespace RadixJobServer.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FailurePolicyRule : IEquatable<FailurePolicyRule>
    {

        /// <summary>
        /// Specifies the action taken on a job replica failure when the onExitCodes requirements are satisfied. FailJob FailurePolicyRuleActionFailJob  This is an action which might be taken on a job replica failure - mark the  job as Failed and terminate all running pods. Ignore FailurePolicyRuleActionIgnore  This is an action which might be taken on a job replica failure - the counter towards  .backoffLimit is not incremented and a replacement replica is created. Count FailurePolicyRuleActionCount  This is an action which might be taken on a job replica failure - the replica failure  is handled in the default way - the counter towards .backoffLimit is incremented.
        /// </summary>
        /// <value>Specifies the action taken on a job replica failure when the onExitCodes requirements are satisfied. FailJob FailurePolicyRuleActionFailJob  This is an action which might be taken on a job replica failure - mark the  job as Failed and terminate all running pods. Ignore FailurePolicyRuleActionIgnore  This is an action which might be taken on a job replica failure - the counter towards  .backoffLimit is not incremented and a replacement replica is created. Count FailurePolicyRuleActionCount  This is an action which might be taken on a job replica failure - the replica failure  is handled in the default way - the counter towards .backoffLimit is incremented.</value>
        [TypeConverter(typeof(CustomEnumConverter<ActionEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum FailJobEnum for FailJob
            /// </summary>
            [EnumMember(Value = "FailJob")]
            FailJobEnum = 1,
            
            /// <summary>
            /// Enum IgnoreEnum for Ignore
            /// </summary>
            [EnumMember(Value = "Ignore")]
            IgnoreEnum = 2,
            
            /// <summary>
            /// Enum CountEnum for Count
            /// </summary>
            [EnumMember(Value = "Count")]
            CountEnum = 3
        }

        /// <summary>
        /// Specifies the action taken on a job replica failure when the onExitCodes requirements are satisfied. FailJob FailurePolicyRuleActionFailJob  This is an action which might be taken on a job replica failure - mark the  job as Failed and terminate all running pods. Ignore FailurePolicyRuleActionIgnore  This is an action which might be taken on a job replica failure - the counter towards  .backoffLimit is not incremented and a replacement replica is created. Count FailurePolicyRuleActionCount  This is an action which might be taken on a job replica failure - the replica failure  is handled in the default way - the counter towards .backoffLimit is incremented.
        /// </summary>
        /// <value>Specifies the action taken on a job replica failure when the onExitCodes requirements are satisfied. FailJob FailurePolicyRuleActionFailJob  This is an action which might be taken on a job replica failure - mark the  job as Failed and terminate all running pods. Ignore FailurePolicyRuleActionIgnore  This is an action which might be taken on a job replica failure - the counter towards  .backoffLimit is not incremented and a replacement replica is created. Count FailurePolicyRuleActionCount  This is an action which might be taken on a job replica failure - the replica failure  is handled in the default way - the counter towards .backoffLimit is incremented.</value>
        [Required]
        [DataMember(Name="action", EmitDefaultValue=true)]
        public ActionEnum Action { get; set; }

        /// <summary>
        /// Gets or Sets OnExitCodes
        /// </summary>
        [Required]
        [DataMember(Name="onExitCodes", EmitDefaultValue=false)]
        public FailurePolicyRuleOnExitCodes OnExitCodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FailurePolicyRule {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  OnExitCodes: ").Append(OnExitCodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FailurePolicyRule)obj);
        }

        /// <summary>
        /// Returns true if FailurePolicyRule instances are equal
        /// </summary>
        /// <param name="other">Instance of FailurePolicyRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FailurePolicyRule other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Action == other.Action ||
                    
                    Action.Equals(other.Action)
                ) && 
                (
                    OnExitCodes == other.OnExitCodes ||
                    OnExitCodes != null &&
                    OnExitCodes.Equals(other.OnExitCodes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Action.GetHashCode();
                    if (OnExitCodes != null)
                    hashCode = hashCode * 59 + OnExitCodes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FailurePolicyRule left, FailurePolicyRule right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FailurePolicyRule left, FailurePolicyRule right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
