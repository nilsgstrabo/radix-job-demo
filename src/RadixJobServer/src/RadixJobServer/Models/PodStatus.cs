/*
 * Radix job scheduler server.
 *
 * This is the API Server for the Radix job scheduler server.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using RadixJobServer.Converters;

namespace RadixJobServer.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PodStatus : IEquatable<PodStatus>
    {
        /// <summary>
        /// Container started timestamp
        /// </summary>
        /// <value>Container started timestamp</value>
        [DataMember(Name="containerStarted", EmitDefaultValue=false)]
        public string ContainerStarted { get; set; }

        /// <summary>
        /// Created timestamp
        /// </summary>
        /// <value>Created timestamp</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public string Created { get; set; }

        /// <summary>
        /// The time at which the batch job&#39;s pod finishedAt.
        /// </summary>
        /// <value>The time at which the batch job&#39;s pod finishedAt.</value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public string EndTime { get; set; }

        /// <summary>
        /// Exit status from the last termination of the container
        /// </summary>
        /// <value>Exit status from the last termination of the container</value>
        [DataMember(Name="exitCode", EmitDefaultValue=false)]
        public int ExitCode { get; set; }

        /// <summary>
        /// The image the container is running.
        /// </summary>
        /// <value>The image the container is running.</value>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// ImageID of the container&#39;s image.
        /// </summary>
        /// <value>ImageID of the container&#39;s image.</value>
        [DataMember(Name="imageId", EmitDefaultValue=false)]
        public string ImageId { get; set; }

        /// <summary>
        /// Pod name
        /// </summary>
        /// <value>Pod name</value>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The index of the pod in the re-starts
        /// </summary>
        /// <value>The index of the pod in the re-starts</value>
        [DataMember(Name="podIndex", EmitDefaultValue=false)]
        public long PodIndex { get; set; }

        /// <summary>
        /// A brief CamelCase message indicating details about why the job is in this phase
        /// </summary>
        /// <value>A brief CamelCase message indicating details about why the job is in this phase</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or Sets ReplicaStatus
        /// </summary>
        [DataMember(Name="replicaStatus", EmitDefaultValue=false)]
        public ReplicaStatus ReplicaStatus { get; set; }

        /// <summary>
        /// RestartCount count of restarts of a component container inside a pod
        /// </summary>
        /// <value>RestartCount count of restarts of a component container inside a pod</value>
        [DataMember(Name="restartCount", EmitDefaultValue=false)]
        public int RestartCount { get; set; }

        /// <summary>
        /// The time at which the batch job&#39;s pod startedAt
        /// </summary>
        /// <value>The time at which the batch job&#39;s pod startedAt</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// StatusMessage provides message describing the status of a component container inside a pod
        /// </summary>
        /// <value>StatusMessage provides message describing the status of a component container inside a pod</value>
        [DataMember(Name="statusMessage", EmitDefaultValue=false)]
        public string StatusMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PodStatus {\n");
            sb.Append("  ContainerStarted: ").Append(ContainerStarted).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  ExitCode: ").Append(ExitCode).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  ImageId: ").Append(ImageId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PodIndex: ").Append(PodIndex).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  ReplicaStatus: ").Append(ReplicaStatus).Append("\n");
            sb.Append("  RestartCount: ").Append(RestartCount).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  StatusMessage: ").Append(StatusMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PodStatus)obj);
        }

        /// <summary>
        /// Returns true if PodStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of PodStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PodStatus other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ContainerStarted == other.ContainerStarted ||
                    ContainerStarted != null &&
                    ContainerStarted.Equals(other.ContainerStarted)
                ) && 
                (
                    Created == other.Created ||
                    Created != null &&
                    Created.Equals(other.Created)
                ) && 
                (
                    EndTime == other.EndTime ||
                    EndTime != null &&
                    EndTime.Equals(other.EndTime)
                ) && 
                (
                    ExitCode == other.ExitCode ||
                    
                    ExitCode.Equals(other.ExitCode)
                ) && 
                (
                    Image == other.Image ||
                    Image != null &&
                    Image.Equals(other.Image)
                ) && 
                (
                    ImageId == other.ImageId ||
                    ImageId != null &&
                    ImageId.Equals(other.ImageId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    PodIndex == other.PodIndex ||
                    
                    PodIndex.Equals(other.PodIndex)
                ) && 
                (
                    Reason == other.Reason ||
                    Reason != null &&
                    Reason.Equals(other.Reason)
                ) && 
                (
                    ReplicaStatus == other.ReplicaStatus ||
                    ReplicaStatus != null &&
                    ReplicaStatus.Equals(other.ReplicaStatus)
                ) && 
                (
                    RestartCount == other.RestartCount ||
                    
                    RestartCount.Equals(other.RestartCount)
                ) && 
                (
                    StartTime == other.StartTime ||
                    StartTime != null &&
                    StartTime.Equals(other.StartTime)
                ) && 
                (
                    StatusMessage == other.StatusMessage ||
                    StatusMessage != null &&
                    StatusMessage.Equals(other.StatusMessage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ContainerStarted != null)
                    hashCode = hashCode * 59 + ContainerStarted.GetHashCode();
                    if (Created != null)
                    hashCode = hashCode * 59 + Created.GetHashCode();
                    if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                    
                    hashCode = hashCode * 59 + ExitCode.GetHashCode();
                    if (Image != null)
                    hashCode = hashCode * 59 + Image.GetHashCode();
                    if (ImageId != null)
                    hashCode = hashCode * 59 + ImageId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + PodIndex.GetHashCode();
                    if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                    if (ReplicaStatus != null)
                    hashCode = hashCode * 59 + ReplicaStatus.GetHashCode();
                    
                    hashCode = hashCode * 59 + RestartCount.GetHashCode();
                    if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                    if (StatusMessage != null)
                    hashCode = hashCode * 59 + StatusMessage.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PodStatus left, PodStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PodStatus left, PodStatus right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
