/*
 * Radix job scheduler server.
 *
 * This is the API Server for the Radix job scheduler server.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using RadixJobServer.Converters;

namespace RadixJobServer.Models
{ 
    /// <summary>
    /// BatchScheduleDescription holds description about batch scheduling job
    /// </summary>
    [DataContract]
    public partial class BatchScheduleDescription : IEquatable<BatchScheduleDescription>
    {
        /// <summary>
        /// Defines a user defined ID of the batch.
        /// </summary>
        /// <value>Defines a user defined ID of the batch.</value>
        /* <example>&#39;batch-id-1&#39;</example> */
        [DataMember(Name="batchId", EmitDefaultValue=false)]
        public string BatchId { get; set; }

        /// <summary>
        /// Gets or Sets DefaultRadixJobComponentConfig
        /// </summary>
        [DataMember(Name="defaultRadixJobComponentConfig", EmitDefaultValue=false)]
        public RadixJobComponentConfig DefaultRadixJobComponentConfig { get; set; }

        /// <summary>
        /// JobScheduleDescriptions descriptions of jobs to schedule within the batch
        /// </summary>
        /// <value>JobScheduleDescriptions descriptions of jobs to schedule within the batch</value>
        [Required]
        [DataMember(Name="jobScheduleDescriptions", EmitDefaultValue=false)]
        public List<JobScheduleDescription> JobScheduleDescriptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BatchScheduleDescription {\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  DefaultRadixJobComponentConfig: ").Append(DefaultRadixJobComponentConfig).Append("\n");
            sb.Append("  JobScheduleDescriptions: ").Append(JobScheduleDescriptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BatchScheduleDescription)obj);
        }

        /// <summary>
        /// Returns true if BatchScheduleDescription instances are equal
        /// </summary>
        /// <param name="other">Instance of BatchScheduleDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchScheduleDescription other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BatchId == other.BatchId ||
                    BatchId != null &&
                    BatchId.Equals(other.BatchId)
                ) && 
                (
                    DefaultRadixJobComponentConfig == other.DefaultRadixJobComponentConfig ||
                    DefaultRadixJobComponentConfig != null &&
                    DefaultRadixJobComponentConfig.Equals(other.DefaultRadixJobComponentConfig)
                ) && 
                (
                    JobScheduleDescriptions == other.JobScheduleDescriptions ||
                    JobScheduleDescriptions != null &&
                    other.JobScheduleDescriptions != null &&
                    JobScheduleDescriptions.SequenceEqual(other.JobScheduleDescriptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BatchId != null)
                    hashCode = hashCode * 59 + BatchId.GetHashCode();
                    if (DefaultRadixJobComponentConfig != null)
                    hashCode = hashCode * 59 + DefaultRadixJobComponentConfig.GetHashCode();
                    if (JobScheduleDescriptions != null)
                    hashCode = hashCode * 59 + JobScheduleDescriptions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BatchScheduleDescription left, BatchScheduleDescription right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BatchScheduleDescription left, BatchScheduleDescription right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
