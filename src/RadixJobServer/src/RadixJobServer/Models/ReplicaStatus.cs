/*
 * Radix job scheduler server.
 *
 * This is the API Server for the Radix job scheduler server.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using RadixJobServer.Converters;

namespace RadixJobServer.Models
{ 
    /// <summary>
    /// ReplicaStatus describes the status of a component container inside a pod
    /// </summary>
    [DataContract]
    public partial class ReplicaStatus : IEquatable<ReplicaStatus>
    {

        /// <summary>
        /// Status of the container Pending = Container in Waiting state and the reason is ContainerCreating Failed = Container is failed Failing = Container is failed Running = Container in Running state Succeeded = Container in Succeeded state Terminated = Container in Terminated state Stopped = Job has been stopped
        /// </summary>
        /// <value>Status of the container Pending = Container in Waiting state and the reason is ContainerCreating Failed = Container is failed Failing = Container is failed Running = Container in Running state Succeeded = Container in Succeeded state Terminated = Container in Terminated state Stopped = Job has been stopped</value>
        [TypeConverter(typeof(CustomEnumConverter<StatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum PendingEnum for Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            PendingEnum = 1,
            
            /// <summary>
            /// Enum SucceededEnum for Succeeded
            /// </summary>
            [EnumMember(Value = "Succeeded")]
            SucceededEnum = 2,
            
            /// <summary>
            /// Enum FailingEnum for Failing
            /// </summary>
            [EnumMember(Value = "Failing")]
            FailingEnum = 3,
            
            /// <summary>
            /// Enum FailedEnum for Failed
            /// </summary>
            [EnumMember(Value = "Failed")]
            FailedEnum = 4,
            
            /// <summary>
            /// Enum RunningEnum for Running
            /// </summary>
            [EnumMember(Value = "Running")]
            RunningEnum = 5,
            
            /// <summary>
            /// Enum TerminatedEnum for Terminated
            /// </summary>
            [EnumMember(Value = "Terminated")]
            TerminatedEnum = 6,
            
            /// <summary>
            /// Enum StartingEnum for Starting
            /// </summary>
            [EnumMember(Value = "Starting")]
            StartingEnum = 7,
            
            /// <summary>
            /// Enum StoppedEnum for Stopped
            /// </summary>
            [EnumMember(Value = "Stopped")]
            StoppedEnum = 8
        }

        /// <summary>
        /// Status of the container Pending &#x3D; Container in Waiting state and the reason is ContainerCreating Failed &#x3D; Container is failed Failing &#x3D; Container is failed Running &#x3D; Container in Running state Succeeded &#x3D; Container in Succeeded state Terminated &#x3D; Container in Terminated state Stopped &#x3D; Job has been stopped
        /// </summary>
        /// <value>Status of the container Pending &#x3D; Container in Waiting state and the reason is ContainerCreating Failed &#x3D; Container is failed Failing &#x3D; Container is failed Running &#x3D; Container in Running state Succeeded &#x3D; Container in Succeeded state Terminated &#x3D; Container in Terminated state Stopped &#x3D; Job has been stopped</value>
        /* <example>Running</example> */
        [Required]
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReplicaStatus {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReplicaStatus)obj);
        }

        /// <summary>
        /// Returns true if ReplicaStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of ReplicaStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReplicaStatus other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReplicaStatus left, ReplicaStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReplicaStatus left, ReplicaStatus right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
