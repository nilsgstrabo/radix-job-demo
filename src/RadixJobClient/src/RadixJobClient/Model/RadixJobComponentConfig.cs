/*
 * Radix job scheduler server.
 *
 * This is the API Server for the Radix job scheduler server.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = RadixJobClient.Client.OpenAPIDateConverter;

namespace RadixJobClient.Model
{
    /// <summary>
    /// RadixJobComponentConfig holds description of RadixJobComponent
    /// </summary>
    [DataContract(Name = "RadixJobComponentConfig")]
    public partial class RadixJobComponentConfig : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RadixJobComponentConfig" /> class.
        /// </summary>
        /// <param name="backoffLimit">BackoffLimit defines attempts to restart job if it fails. Corresponds to BackoffLimit in K8s..</param>
        /// <param name="failurePolicy">failurePolicy.</param>
        /// <param name="imageTagName">ImageTagName defines the image tag name to use for the job image.</param>
        /// <param name="node">node.</param>
        /// <param name="resources">resources.</param>
        /// <param name="timeLimitSeconds">TimeLimitSeconds defines maximum job run time. Corresponds to ActiveDeadlineSeconds in K8s..</param>
        public RadixJobComponentConfig(int backoffLimit = default(int), FailurePolicy failurePolicy = default(FailurePolicy), string imageTagName = default(string), Node node = default(Node), Resources resources = default(Resources), long timeLimitSeconds = default(long))
        {
            this.BackoffLimit = backoffLimit;
            this.FailurePolicy = failurePolicy;
            this.ImageTagName = imageTagName;
            this.Node = node;
            this.Resources = resources;
            this.TimeLimitSeconds = timeLimitSeconds;
        }

        /// <summary>
        /// BackoffLimit defines attempts to restart job if it fails. Corresponds to BackoffLimit in K8s.
        /// </summary>
        /// <value>BackoffLimit defines attempts to restart job if it fails. Corresponds to BackoffLimit in K8s.</value>
        [DataMember(Name = "backoffLimit", EmitDefaultValue = false)]
        public int BackoffLimit { get; set; }

        /// <summary>
        /// Gets or Sets FailurePolicy
        /// </summary>
        [DataMember(Name = "failurePolicy", EmitDefaultValue = false)]
        public FailurePolicy FailurePolicy { get; set; }

        /// <summary>
        /// ImageTagName defines the image tag name to use for the job image
        /// </summary>
        /// <value>ImageTagName defines the image tag name to use for the job image</value>
        [DataMember(Name = "imageTagName", EmitDefaultValue = false)]
        public string ImageTagName { get; set; }

        /// <summary>
        /// Gets or Sets Node
        /// </summary>
        [DataMember(Name = "node", EmitDefaultValue = false)]
        public Node Node { get; set; }

        /// <summary>
        /// Gets or Sets Resources
        /// </summary>
        [DataMember(Name = "resources", EmitDefaultValue = false)]
        public Resources Resources { get; set; }

        /// <summary>
        /// TimeLimitSeconds defines maximum job run time. Corresponds to ActiveDeadlineSeconds in K8s.
        /// </summary>
        /// <value>TimeLimitSeconds defines maximum job run time. Corresponds to ActiveDeadlineSeconds in K8s.</value>
        [DataMember(Name = "timeLimitSeconds", EmitDefaultValue = false)]
        public long TimeLimitSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RadixJobComponentConfig {\n");
            sb.Append("  BackoffLimit: ").Append(BackoffLimit).Append("\n");
            sb.Append("  FailurePolicy: ").Append(FailurePolicy).Append("\n");
            sb.Append("  ImageTagName: ").Append(ImageTagName).Append("\n");
            sb.Append("  Node: ").Append(Node).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  TimeLimitSeconds: ").Append(TimeLimitSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
