/*
 * Radix job scheduler server.
 *
 * This is the API Server for the Radix job scheduler server.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = RadixJobClient.Client.OpenAPIDateConverter;

namespace RadixJobClient.Model
{
    /// <summary>
    /// FailurePolicyRuleOnExitCodes describes the requirement for handling a failed job replica based on its exit code.
    /// </summary>
    [DataContract(Name = "FailurePolicyRuleOnExitCodes")]
    public partial class FailurePolicyRuleOnExitCodes : IValidatableObject
    {
        /// <summary>
        /// Represents the relationship between the job replica&#39;s exit code and the specified values. Replicas completed with success (exit code 0) are excluded from the requirement check. In FailurePolicyRuleOnExitCodesOpIn  The requirement is satisfied if the job replica&#39;s exit code is in the set of specified values. NotIn FailurePolicyRuleOnExitCodesOpNotIn  The requirement is satisfied if the job replica&#39;s exit code is not in the set of specified values.
        /// </summary>
        /// <value>Represents the relationship between the job replica&#39;s exit code and the specified values. Replicas completed with success (exit code 0) are excluded from the requirement check. In FailurePolicyRuleOnExitCodesOpIn  The requirement is satisfied if the job replica&#39;s exit code is in the set of specified values. NotIn FailurePolicyRuleOnExitCodesOpNotIn  The requirement is satisfied if the job replica&#39;s exit code is not in the set of specified values.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperatorEnum
        {
            /// <summary>
            /// Enum In for value: In
            /// </summary>
            [EnumMember(Value = "In")]
            In = 1,

            /// <summary>
            /// Enum NotIn for value: NotIn
            /// </summary>
            [EnumMember(Value = "NotIn")]
            NotIn = 2
        }


        /// <summary>
        /// Represents the relationship between the job replica&#39;s exit code and the specified values. Replicas completed with success (exit code 0) are excluded from the requirement check. In FailurePolicyRuleOnExitCodesOpIn  The requirement is satisfied if the job replica&#39;s exit code is in the set of specified values. NotIn FailurePolicyRuleOnExitCodesOpNotIn  The requirement is satisfied if the job replica&#39;s exit code is not in the set of specified values.
        /// </summary>
        /// <value>Represents the relationship between the job replica&#39;s exit code and the specified values. Replicas completed with success (exit code 0) are excluded from the requirement check. In FailurePolicyRuleOnExitCodesOpIn  The requirement is satisfied if the job replica&#39;s exit code is in the set of specified values. NotIn FailurePolicyRuleOnExitCodesOpNotIn  The requirement is satisfied if the job replica&#39;s exit code is not in the set of specified values.</value>
        [DataMember(Name = "operator", IsRequired = true, EmitDefaultValue = true)]
        public OperatorEnum Operator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FailurePolicyRuleOnExitCodes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FailurePolicyRuleOnExitCodes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FailurePolicyRuleOnExitCodes" /> class.
        /// </summary>
        /// <param name="varOperator">Represents the relationship between the job replica&#39;s exit code and the specified values. Replicas completed with success (exit code 0) are excluded from the requirement check. In FailurePolicyRuleOnExitCodesOpIn  The requirement is satisfied if the job replica&#39;s exit code is in the set of specified values. NotIn FailurePolicyRuleOnExitCodesOpNotIn  The requirement is satisfied if the job replica&#39;s exit code is not in the set of specified values. (required).</param>
        /// <param name="values">Specifies the set of values. The job replica&#39;s exit code is checked against this set of values with respect to the operator. The list must not contain duplicates. Value &#39;0&#39; cannot be used for the In operator. (required).</param>
        public FailurePolicyRuleOnExitCodes(OperatorEnum varOperator = default(OperatorEnum), List<int> values = default(List<int>))
        {
            this.Operator = varOperator;
            // to ensure "values" is required (not null)
            if (values == null)
            {
                throw new ArgumentNullException("values is a required property for FailurePolicyRuleOnExitCodes and cannot be null");
            }
            this.Values = values;
        }

        /// <summary>
        /// Specifies the set of values. The job replica&#39;s exit code is checked against this set of values with respect to the operator. The list must not contain duplicates. Value &#39;0&#39; cannot be used for the In operator.
        /// </summary>
        /// <value>Specifies the set of values. The job replica&#39;s exit code is checked against this set of values with respect to the operator. The list must not contain duplicates. Value &#39;0&#39; cannot be used for the In operator.</value>
        [DataMember(Name = "values", IsRequired = true, EmitDefaultValue = true)]
        public List<int> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FailurePolicyRuleOnExitCodes {\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
