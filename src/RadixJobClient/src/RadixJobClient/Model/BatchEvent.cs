/*
 * Radix job scheduler server.
 *
 * This is the API Server for the Radix job scheduler server.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = RadixJobClient.Client.OpenAPIDateConverter;

namespace RadixJobClient.Model
{
    /// <summary>
    /// BatchEvent holds general information about batch event on change of status
    /// </summary>
    [DataContract(Name = "BatchEvent")]
    public partial class BatchEvent : IEquatable<BatchEvent>, IValidatableObject
    {
        /// <summary>
        /// Status of the job Running &#x3D; Job is running Succeeded &#x3D; Job has succeeded Failed &#x3D; Job has failed Waiting &#x3D; Job is waiting Stopping &#x3D; Job is stopping Stopped &#x3D; Job has been stopped Active &#x3D; Job is active Completed &#x3D; Job is completed
        /// </summary>
        /// <value>Status of the job Running &#x3D; Job is running Succeeded &#x3D; Job has succeeded Failed &#x3D; Job has failed Waiting &#x3D; Job is waiting Stopping &#x3D; Job is stopping Stopped &#x3D; Job has been stopped Active &#x3D; Job is active Completed &#x3D; Job is completed</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Running for value: Running
            /// </summary>
            [EnumMember(Value = "Running")]
            Running = 1,

            /// <summary>
            /// Enum Succeeded for value: Succeeded
            /// </summary>
            [EnumMember(Value = "Succeeded")]
            Succeeded = 2,

            /// <summary>
            /// Enum Failed for value: Failed
            /// </summary>
            [EnumMember(Value = "Failed")]
            Failed = 3,

            /// <summary>
            /// Enum Waiting for value: Waiting
            /// </summary>
            [EnumMember(Value = "Waiting")]
            Waiting = 4,

            /// <summary>
            /// Enum Stopping for value: Stopping
            /// </summary>
            [EnumMember(Value = "Stopping")]
            Stopping = 5,

            /// <summary>
            /// Enum Stopped for value: Stopped
            /// </summary>
            [EnumMember(Value = "Stopped")]
            Stopped = 6,

            /// <summary>
            /// Enum Active for value: Active
            /// </summary>
            [EnumMember(Value = "Active")]
            Active = 7,

            /// <summary>
            /// Enum Completed for value: Completed
            /// </summary>
            [EnumMember(Value = "Completed")]
            Completed = 8

        }


        /// <summary>
        /// Status of the job Running &#x3D; Job is running Succeeded &#x3D; Job has succeeded Failed &#x3D; Job has failed Waiting &#x3D; Job is waiting Stopping &#x3D; Job is stopping Stopped &#x3D; Job has been stopped Active &#x3D; Job is active Completed &#x3D; Job is completed
        /// </summary>
        /// <value>Status of the job Running &#x3D; Job is running Succeeded &#x3D; Job has succeeded Failed &#x3D; Job has failed Waiting &#x3D; Job is waiting Stopping &#x3D; Job is stopping Stopped &#x3D; Job has been stopped Active &#x3D; Job is active Completed &#x3D; Job is completed</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BatchEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchEvent" /> class.
        /// </summary>
        /// <param name="deploymentName">DeploymentName for this batch.</param>
        /// <param name="batchId">Defines a user defined ID of the batch..</param>
        /// <param name="batchName">BatchName Optional Batch ID of a job.</param>
        /// <param name="batchType">BatchType Single job or multiple jobs batch.</param>
        /// <param name="created">Created timestamp (required).</param>
        /// <param name="ended">Ended timestamp.</param>
        /// <param name="_event">_event (required).</param>
        /// <param name="failed">The number of times the container for the job has failed. +optional.</param>
        /// <param name="jobId">JobId Optional ID of a job.</param>
        /// <param name="jobStatuses">JobStatuses of the jobs in the batch.</param>
        /// <param name="message">Message, if any, of the job.</param>
        /// <param name="name">Name of the job (required).</param>
        /// <param name="podStatuses">PodStatuses for each pod of the job.</param>
        /// <param name="restart">Timestamp of the job restart, if applied. +optional.</param>
        /// <param name="started">Started timestamp.</param>
        /// <param name="status">Status of the job Running &#x3D; Job is running Succeeded &#x3D; Job has succeeded Failed &#x3D; Job has failed Waiting &#x3D; Job is waiting Stopping &#x3D; Job is stopping Stopped &#x3D; Job has been stopped Active &#x3D; Job is active Completed &#x3D; Job is completed.</param>
        /// <param name="updated">Updated timestamp when the status was updated.</param>
        public BatchEvent(string deploymentName = default(string), string batchId = default(string), string batchName = default(string), string batchType = default(string), string created = default(string), string ended = default(string), string _event = default(string), int failed = default(int), string jobId = default(string), List<JobStatus> jobStatuses = default(List<JobStatus>), string message = default(string), string name = default(string), List<PodStatus> podStatuses = default(List<PodStatus>), string restart = default(string), string started = default(string), StatusEnum? status = default(StatusEnum?), string updated = default(string))
        {
            // to ensure "created" is required (not null)
            if (created == null) {
                throw new ArgumentNullException("created is a required property for BatchEvent and cannot be null");
            }
            this.Created = created;
            // to ensure "_event" is required (not null)
            if (_event == null) {
                throw new ArgumentNullException("_event is a required property for BatchEvent and cannot be null");
            }
            this.Event = _event;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for BatchEvent and cannot be null");
            }
            this.Name = name;
            this.DeploymentName = deploymentName;
            this.BatchId = batchId;
            this.BatchName = batchName;
            this.BatchType = batchType;
            this.Ended = ended;
            this.Failed = failed;
            this.JobId = jobId;
            this.JobStatuses = jobStatuses;
            this.Message = message;
            this.PodStatuses = podStatuses;
            this.Restart = restart;
            this.Started = started;
            this.Status = status;
            this.Updated = updated;
        }

        /// <summary>
        /// DeploymentName for this batch
        /// </summary>
        /// <value>DeploymentName for this batch</value>
        [DataMember(Name = "DeploymentName", EmitDefaultValue = false)]
        public string DeploymentName { get; set; }

        /// <summary>
        /// Defines a user defined ID of the batch.
        /// </summary>
        /// <value>Defines a user defined ID of the batch.</value>
        [DataMember(Name = "batchId", EmitDefaultValue = false)]
        public string BatchId { get; set; }

        /// <summary>
        /// BatchName Optional Batch ID of a job
        /// </summary>
        /// <value>BatchName Optional Batch ID of a job</value>
        [DataMember(Name = "batchName", EmitDefaultValue = false)]
        public string BatchName { get; set; }

        /// <summary>
        /// BatchType Single job or multiple jobs batch
        /// </summary>
        /// <value>BatchType Single job or multiple jobs batch</value>
        [DataMember(Name = "batchType", EmitDefaultValue = false)]
        public string BatchType { get; set; }

        /// <summary>
        /// Created timestamp
        /// </summary>
        /// <value>Created timestamp</value>
        [DataMember(Name = "created", IsRequired = true, EmitDefaultValue = false)]
        public string Created { get; set; }

        /// <summary>
        /// Ended timestamp
        /// </summary>
        /// <value>Ended timestamp</value>
        [DataMember(Name = "ended", EmitDefaultValue = false)]
        public string Ended { get; set; }

        /// <summary>
        /// Gets or Sets Event
        /// </summary>
        [DataMember(Name = "event", IsRequired = true, EmitDefaultValue = false)]
        public string Event { get; set; }

        /// <summary>
        /// The number of times the container for the job has failed. +optional
        /// </summary>
        /// <value>The number of times the container for the job has failed. +optional</value>
        [DataMember(Name = "failed", EmitDefaultValue = false)]
        public int Failed { get; set; }

        /// <summary>
        /// JobId Optional ID of a job
        /// </summary>
        /// <value>JobId Optional ID of a job</value>
        [DataMember(Name = "jobId", EmitDefaultValue = false)]
        public string JobId { get; set; }

        /// <summary>
        /// JobStatuses of the jobs in the batch
        /// </summary>
        /// <value>JobStatuses of the jobs in the batch</value>
        [DataMember(Name = "jobStatuses", EmitDefaultValue = false)]
        public List<JobStatus> JobStatuses { get; set; }

        /// <summary>
        /// Message, if any, of the job
        /// </summary>
        /// <value>Message, if any, of the job</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Name of the job
        /// </summary>
        /// <value>Name of the job</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// PodStatuses for each pod of the job
        /// </summary>
        /// <value>PodStatuses for each pod of the job</value>
        [DataMember(Name = "podStatuses", EmitDefaultValue = false)]
        public List<PodStatus> PodStatuses { get; set; }

        /// <summary>
        /// Timestamp of the job restart, if applied. +optional
        /// </summary>
        /// <value>Timestamp of the job restart, if applied. +optional</value>
        [DataMember(Name = "restart", EmitDefaultValue = false)]
        public string Restart { get; set; }

        /// <summary>
        /// Started timestamp
        /// </summary>
        /// <value>Started timestamp</value>
        [DataMember(Name = "started", EmitDefaultValue = false)]
        public string Started { get; set; }

        /// <summary>
        /// Updated timestamp when the status was updated
        /// </summary>
        /// <value>Updated timestamp when the status was updated</value>
        [DataMember(Name = "updated", EmitDefaultValue = false)]
        public string Updated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BatchEvent {\n");
            sb.Append("  DeploymentName: ").Append(DeploymentName).Append("\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  BatchName: ").Append(BatchName).Append("\n");
            sb.Append("  BatchType: ").Append(BatchType).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Ended: ").Append(Ended).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  JobStatuses: ").Append(JobStatuses).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PodStatuses: ").Append(PodStatuses).Append("\n");
            sb.Append("  Restart: ").Append(Restart).Append("\n");
            sb.Append("  Started: ").Append(Started).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchEvent);
        }

        /// <summary>
        /// Returns true if BatchEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeploymentName == input.DeploymentName ||
                    (this.DeploymentName != null &&
                    this.DeploymentName.Equals(input.DeploymentName))
                ) && 
                (
                    this.BatchId == input.BatchId ||
                    (this.BatchId != null &&
                    this.BatchId.Equals(input.BatchId))
                ) && 
                (
                    this.BatchName == input.BatchName ||
                    (this.BatchName != null &&
                    this.BatchName.Equals(input.BatchName))
                ) && 
                (
                    this.BatchType == input.BatchType ||
                    (this.BatchType != null &&
                    this.BatchType.Equals(input.BatchType))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Ended == input.Ended ||
                    (this.Ended != null &&
                    this.Ended.Equals(input.Ended))
                ) && 
                (
                    this.Event == input.Event ||
                    (this.Event != null &&
                    this.Event.Equals(input.Event))
                ) && 
                (
                    this.Failed == input.Failed ||
                    this.Failed.Equals(input.Failed)
                ) && 
                (
                    this.JobId == input.JobId ||
                    (this.JobId != null &&
                    this.JobId.Equals(input.JobId))
                ) && 
                (
                    this.JobStatuses == input.JobStatuses ||
                    this.JobStatuses != null &&
                    input.JobStatuses != null &&
                    this.JobStatuses.SequenceEqual(input.JobStatuses)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PodStatuses == input.PodStatuses ||
                    this.PodStatuses != null &&
                    input.PodStatuses != null &&
                    this.PodStatuses.SequenceEqual(input.PodStatuses)
                ) && 
                (
                    this.Restart == input.Restart ||
                    (this.Restart != null &&
                    this.Restart.Equals(input.Restart))
                ) && 
                (
                    this.Started == input.Started ||
                    (this.Started != null &&
                    this.Started.Equals(input.Started))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeploymentName != null)
                    hashCode = hashCode * 59 + this.DeploymentName.GetHashCode();
                if (this.BatchId != null)
                    hashCode = hashCode * 59 + this.BatchId.GetHashCode();
                if (this.BatchName != null)
                    hashCode = hashCode * 59 + this.BatchName.GetHashCode();
                if (this.BatchType != null)
                    hashCode = hashCode * 59 + this.BatchType.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Ended != null)
                    hashCode = hashCode * 59 + this.Ended.GetHashCode();
                if (this.Event != null)
                    hashCode = hashCode * 59 + this.Event.GetHashCode();
                hashCode = hashCode * 59 + this.Failed.GetHashCode();
                if (this.JobId != null)
                    hashCode = hashCode * 59 + this.JobId.GetHashCode();
                if (this.JobStatuses != null)
                    hashCode = hashCode * 59 + this.JobStatuses.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PodStatuses != null)
                    hashCode = hashCode * 59 + this.PodStatuses.GetHashCode();
                if (this.Restart != null)
                    hashCode = hashCode * 59 + this.Restart.GetHashCode();
                if (this.Started != null)
                    hashCode = hashCode * 59 + this.Started.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
