/*
 * Radix job scheduler server.
 *
 * This is the API Server for the Radix job scheduler server.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = RadixJobClient.Client.OpenAPIDateConverter;

namespace RadixJobClient.Model
{
    /// <summary>
    /// ReplicaStatus describes the status of a component container inside a pod
    /// </summary>
    [DataContract(Name = "ReplicaStatus")]
    public partial class ReplicaStatus : IValidatableObject
    {
        /// <summary>
        /// Status of the container Pending &#x3D; Container in Waiting state and the reason is ContainerCreating Failed &#x3D; Container is failed Failing &#x3D; Container is failed Running &#x3D; Container in Running state Succeeded &#x3D; Container in Succeeded state Terminated &#x3D; Container in Terminated state Stopped &#x3D; Job has been stopped
        /// </summary>
        /// <value>Status of the container Pending &#x3D; Container in Waiting state and the reason is ContainerCreating Failed &#x3D; Container is failed Failing &#x3D; Container is failed Running &#x3D; Container in Running state Succeeded &#x3D; Container in Succeeded state Terminated &#x3D; Container in Terminated state Stopped &#x3D; Job has been stopped</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 1,

            /// <summary>
            /// Enum Succeeded for value: Succeeded
            /// </summary>
            [EnumMember(Value = "Succeeded")]
            Succeeded = 2,

            /// <summary>
            /// Enum Failing for value: Failing
            /// </summary>
            [EnumMember(Value = "Failing")]
            Failing = 3,

            /// <summary>
            /// Enum Failed for value: Failed
            /// </summary>
            [EnumMember(Value = "Failed")]
            Failed = 4,

            /// <summary>
            /// Enum Running for value: Running
            /// </summary>
            [EnumMember(Value = "Running")]
            Running = 5,

            /// <summary>
            /// Enum Terminated for value: Terminated
            /// </summary>
            [EnumMember(Value = "Terminated")]
            Terminated = 6,

            /// <summary>
            /// Enum Starting for value: Starting
            /// </summary>
            [EnumMember(Value = "Starting")]
            Starting = 7,

            /// <summary>
            /// Enum Stopped for value: Stopped
            /// </summary>
            [EnumMember(Value = "Stopped")]
            Stopped = 8
        }


        /// <summary>
        /// Status of the container Pending &#x3D; Container in Waiting state and the reason is ContainerCreating Failed &#x3D; Container is failed Failing &#x3D; Container is failed Running &#x3D; Container in Running state Succeeded &#x3D; Container in Succeeded state Terminated &#x3D; Container in Terminated state Stopped &#x3D; Job has been stopped
        /// </summary>
        /// <value>Status of the container Pending &#x3D; Container in Waiting state and the reason is ContainerCreating Failed &#x3D; Container is failed Failing &#x3D; Container is failed Running &#x3D; Container in Running state Succeeded &#x3D; Container in Succeeded state Terminated &#x3D; Container in Terminated state Stopped &#x3D; Job has been stopped</value>
        /*
        <example>Running</example>
        */
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicaStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReplicaStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicaStatus" /> class.
        /// </summary>
        /// <param name="status">Status of the container Pending &#x3D; Container in Waiting state and the reason is ContainerCreating Failed &#x3D; Container is failed Failing &#x3D; Container is failed Running &#x3D; Container in Running state Succeeded &#x3D; Container in Succeeded state Terminated &#x3D; Container in Terminated state Stopped &#x3D; Job has been stopped (required).</param>
        public ReplicaStatus(StatusEnum status = default(StatusEnum))
        {
            this.Status = status;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReplicaStatus {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
