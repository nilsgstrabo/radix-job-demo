/*
 * Radix job scheduler server.
 *
 * This is the API Server for the Radix job scheduler server.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = RadixJobClient.Client.OpenAPIDateConverter;

namespace RadixJobClient.Model
{
    /// <summary>
    /// RadixBatchJobPodStatus
    /// </summary>
    [DataContract(Name = "RadixBatchJobPodStatus")]
    public partial class RadixBatchJobPodStatus : IEquatable<RadixBatchJobPodStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RadixBatchJobPodStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RadixBatchJobPodStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RadixBatchJobPodStatus" /> class.
        /// </summary>
        /// <param name="containerStarted">Container started timestamp.</param>
        /// <param name="created">Created timestamp.</param>
        /// <param name="endTime">The time at which the batch job&#39;s pod finishedAt..</param>
        /// <param name="exitCode">Exit status from the last termination of the container.</param>
        /// <param name="image">The image the container is running..</param>
        /// <param name="imageId">ImageID of the container&#39;s image..</param>
        /// <param name="name">Pod name (required).</param>
        /// <param name="podIndex">The index of the pod in the re-starts.</param>
        /// <param name="reason">A brief CamelCase message indicating details about why the job is in this phase.</param>
        /// <param name="replicaStatus">replicaStatus.</param>
        /// <param name="restartCount">RestartCount count of restarts of a component container inside a pod.</param>
        /// <param name="startTime">The time at which the batch job&#39;s pod startedAt.</param>
        /// <param name="statusMessage">StatusMessage provides message describing the status of a component container inside a pod.</param>
        public RadixBatchJobPodStatus(string containerStarted = default(string), string created = default(string), string endTime = default(string), int exitCode = default(int), string image = default(string), string imageId = default(string), string name = default(string), long podIndex = default(long), string reason = default(string), ReplicaStatus replicaStatus = default(ReplicaStatus), int restartCount = default(int), string startTime = default(string), string statusMessage = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for RadixBatchJobPodStatus and cannot be null");
            }
            this.Name = name;
            this.ContainerStarted = containerStarted;
            this.Created = created;
            this.EndTime = endTime;
            this.ExitCode = exitCode;
            this.Image = image;
            this.ImageId = imageId;
            this.PodIndex = podIndex;
            this.Reason = reason;
            this.ReplicaStatus = replicaStatus;
            this.RestartCount = restartCount;
            this.StartTime = startTime;
            this.StatusMessage = statusMessage;
        }

        /// <summary>
        /// Container started timestamp
        /// </summary>
        /// <value>Container started timestamp</value>
        [DataMember(Name = "containerStarted", EmitDefaultValue = false)]
        public string ContainerStarted { get; set; }

        /// <summary>
        /// Created timestamp
        /// </summary>
        /// <value>Created timestamp</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public string Created { get; set; }

        /// <summary>
        /// The time at which the batch job&#39;s pod finishedAt.
        /// </summary>
        /// <value>The time at which the batch job&#39;s pod finishedAt.</value>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        public string EndTime { get; set; }

        /// <summary>
        /// Exit status from the last termination of the container
        /// </summary>
        /// <value>Exit status from the last termination of the container</value>
        [DataMember(Name = "exitCode", EmitDefaultValue = false)]
        public int ExitCode { get; set; }

        /// <summary>
        /// The image the container is running.
        /// </summary>
        /// <value>The image the container is running.</value>
        [DataMember(Name = "image", EmitDefaultValue = false)]
        public string Image { get; set; }

        /// <summary>
        /// ImageID of the container&#39;s image.
        /// </summary>
        /// <value>ImageID of the container&#39;s image.</value>
        [DataMember(Name = "imageId", EmitDefaultValue = false)]
        public string ImageId { get; set; }

        /// <summary>
        /// Pod name
        /// </summary>
        /// <value>Pod name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The index of the pod in the re-starts
        /// </summary>
        /// <value>The index of the pod in the re-starts</value>
        [DataMember(Name = "podIndex", EmitDefaultValue = false)]
        public long PodIndex { get; set; }

        /// <summary>
        /// A brief CamelCase message indicating details about why the job is in this phase
        /// </summary>
        /// <value>A brief CamelCase message indicating details about why the job is in this phase</value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or Sets ReplicaStatus
        /// </summary>
        [DataMember(Name = "replicaStatus", EmitDefaultValue = false)]
        public ReplicaStatus ReplicaStatus { get; set; }

        /// <summary>
        /// RestartCount count of restarts of a component container inside a pod
        /// </summary>
        /// <value>RestartCount count of restarts of a component container inside a pod</value>
        [DataMember(Name = "restartCount", EmitDefaultValue = false)]
        public int RestartCount { get; set; }

        /// <summary>
        /// The time at which the batch job&#39;s pod startedAt
        /// </summary>
        /// <value>The time at which the batch job&#39;s pod startedAt</value>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        public string StartTime { get; set; }

        /// <summary>
        /// StatusMessage provides message describing the status of a component container inside a pod
        /// </summary>
        /// <value>StatusMessage provides message describing the status of a component container inside a pod</value>
        [DataMember(Name = "statusMessage", EmitDefaultValue = false)]
        public string StatusMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RadixBatchJobPodStatus {\n");
            sb.Append("  ContainerStarted: ").Append(ContainerStarted).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  ExitCode: ").Append(ExitCode).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  ImageId: ").Append(ImageId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PodIndex: ").Append(PodIndex).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  ReplicaStatus: ").Append(ReplicaStatus).Append("\n");
            sb.Append("  RestartCount: ").Append(RestartCount).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  StatusMessage: ").Append(StatusMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RadixBatchJobPodStatus);
        }

        /// <summary>
        /// Returns true if RadixBatchJobPodStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of RadixBatchJobPodStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RadixBatchJobPodStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContainerStarted == input.ContainerStarted ||
                    (this.ContainerStarted != null &&
                    this.ContainerStarted.Equals(input.ContainerStarted))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.ExitCode == input.ExitCode ||
                    this.ExitCode.Equals(input.ExitCode)
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.ImageId == input.ImageId ||
                    (this.ImageId != null &&
                    this.ImageId.Equals(input.ImageId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PodIndex == input.PodIndex ||
                    this.PodIndex.Equals(input.PodIndex)
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.ReplicaStatus == input.ReplicaStatus ||
                    (this.ReplicaStatus != null &&
                    this.ReplicaStatus.Equals(input.ReplicaStatus))
                ) && 
                (
                    this.RestartCount == input.RestartCount ||
                    this.RestartCount.Equals(input.RestartCount)
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.StatusMessage == input.StatusMessage ||
                    (this.StatusMessage != null &&
                    this.StatusMessage.Equals(input.StatusMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContainerStarted != null)
                    hashCode = hashCode * 59 + this.ContainerStarted.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                hashCode = hashCode * 59 + this.ExitCode.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.ImageId != null)
                    hashCode = hashCode * 59 + this.ImageId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.PodIndex.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.ReplicaStatus != null)
                    hashCode = hashCode * 59 + this.ReplicaStatus.GetHashCode();
                hashCode = hashCode * 59 + this.RestartCount.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.StatusMessage != null)
                    hashCode = hashCode * 59 + this.StatusMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
