/*
 * Radix job scheduler server.
 *
 * This is the API Server for the Radix job scheduler server.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using RadixJobClient.Client;
using RadixJobClient.Model;

namespace RadixJobClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create job
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobCreation">Job to create</param>
        /// <returns>JobStatus</returns>
        JobStatus CreateJob(JobScheduleDescription jobCreation);

        /// <summary>
        /// Create job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobCreation">Job to create</param>
        /// <returns>ApiResponse of JobStatus</returns>
        ApiResponse<JobStatus> CreateJobWithHttpInfo(JobScheduleDescription jobCreation);
        /// <summary>
        /// Delete job
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">Name of job</param>
        /// <returns>Status</returns>
        Status DeleteJob(string jobName);

        /// <summary>
        /// Delete job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">Name of job</param>
        /// <returns>ApiResponse of Status</returns>
        ApiResponse<Status> DeleteJobWithHttpInfo(string jobName);
        /// <summary>
        /// Gets job
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">Name of job</param>
        /// <returns>JobStatus</returns>
        JobStatus GetJob(string jobName);

        /// <summary>
        /// Gets job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">Name of job</param>
        /// <returns>ApiResponse of JobStatus</returns>
        ApiResponse<JobStatus> GetJobWithHttpInfo(string jobName);
        /// <summary>
        /// Gets jobs
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;JobStatus&gt;</returns>
        List<JobStatus> GetJobs();

        /// <summary>
        /// Gets jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;JobStatus&gt;</returns>
        ApiResponse<List<JobStatus>> GetJobsWithHttpInfo();
        /// <summary>
        /// Stop job
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">Name of job</param>
        /// <returns>Status</returns>
        Status StopJob(string jobName);

        /// <summary>
        /// Stop job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">Name of job</param>
        /// <returns>ApiResponse of Status</returns>
        ApiResponse<Status> StopJobWithHttpInfo(string jobName);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobCreation">Job to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobStatus</returns>
        System.Threading.Tasks.Task<JobStatus> CreateJobAsync(JobScheduleDescription jobCreation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobCreation">Job to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobStatus>> CreateJobWithHttpInfoAsync(JobScheduleDescription jobCreation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">Name of job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Status</returns>
        System.Threading.Tasks.Task<Status> DeleteJobAsync(string jobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">Name of job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Status)</returns>
        System.Threading.Tasks.Task<ApiResponse<Status>> DeleteJobWithHttpInfoAsync(string jobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">Name of job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobStatus</returns>
        System.Threading.Tasks.Task<JobStatus> GetJobAsync(string jobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">Name of job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobStatus>> GetJobWithHttpInfoAsync(string jobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JobStatus&gt;</returns>
        System.Threading.Tasks.Task<List<JobStatus>> GetJobsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JobStatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobStatus>>> GetJobsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Stop job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">Name of job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Status</returns>
        System.Threading.Tasks.Task<Status> StopJobAsync(string jobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Stop job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">Name of job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Status)</returns>
        System.Threading.Tasks.Task<ApiResponse<Status>> StopJobWithHttpInfoAsync(string jobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobApi : IJobApiSync, IJobApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JobApi : IJobApi
    {
        private RadixJobClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JobApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobApi(string basePath)
        {
            this.Configuration = RadixJobClient.Client.Configuration.MergeConfigurations(
                RadixJobClient.Client.GlobalConfiguration.Instance,
                new RadixJobClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new RadixJobClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RadixJobClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = RadixJobClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JobApi(RadixJobClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = RadixJobClient.Client.Configuration.MergeConfigurations(
                RadixJobClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new RadixJobClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RadixJobClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = RadixJobClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public JobApi(RadixJobClient.Client.ISynchronousClient client, RadixJobClient.Client.IAsynchronousClient asyncClient, RadixJobClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = RadixJobClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public RadixJobClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public RadixJobClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RadixJobClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RadixJobClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create job 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobCreation">Job to create</param>
        /// <returns>JobStatus</returns>
        public JobStatus CreateJob(JobScheduleDescription jobCreation)
        {
            RadixJobClient.Client.ApiResponse<JobStatus> localVarResponse = CreateJobWithHttpInfo(jobCreation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create job 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobCreation">Job to create</param>
        /// <returns>ApiResponse of JobStatus</returns>
        public RadixJobClient.Client.ApiResponse<JobStatus> CreateJobWithHttpInfo(JobScheduleDescription jobCreation)
        {
            // verify the required parameter 'jobCreation' is set
            if (jobCreation == null)
                throw new RadixJobClient.Client.ApiException(400, "Missing required parameter 'jobCreation' when calling JobApi->CreateJob");

            RadixJobClient.Client.RequestOptions localVarRequestOptions = new RadixJobClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RadixJobClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixJobClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = jobCreation;


            // make the HTTP request
            var localVarResponse = this.Client.Post<JobStatus>("/jobs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create job 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobCreation">Job to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobStatus</returns>
        public async System.Threading.Tasks.Task<JobStatus> CreateJobAsync(JobScheduleDescription jobCreation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RadixJobClient.Client.ApiResponse<JobStatus> localVarResponse = await CreateJobWithHttpInfoAsync(jobCreation, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create job 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobCreation">Job to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobStatus)</returns>
        public async System.Threading.Tasks.Task<RadixJobClient.Client.ApiResponse<JobStatus>> CreateJobWithHttpInfoAsync(JobScheduleDescription jobCreation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobCreation' is set
            if (jobCreation == null)
                throw new RadixJobClient.Client.ApiException(400, "Missing required parameter 'jobCreation' when calling JobApi->CreateJob");


            RadixJobClient.Client.RequestOptions localVarRequestOptions = new RadixJobClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RadixJobClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixJobClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = jobCreation;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<JobStatus>("/jobs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete job 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">Name of job</param>
        /// <returns>Status</returns>
        public Status DeleteJob(string jobName)
        {
            RadixJobClient.Client.ApiResponse<Status> localVarResponse = DeleteJobWithHttpInfo(jobName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete job 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">Name of job</param>
        /// <returns>ApiResponse of Status</returns>
        public RadixJobClient.Client.ApiResponse<Status> DeleteJobWithHttpInfo(string jobName)
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
                throw new RadixJobClient.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobApi->DeleteJob");

            RadixJobClient.Client.RequestOptions localVarRequestOptions = new RadixJobClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RadixJobClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixJobClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("jobName", RadixJobClient.Client.ClientUtils.ParameterToString(jobName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Status>("/jobs/{jobName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete job 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">Name of job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Status</returns>
        public async System.Threading.Tasks.Task<Status> DeleteJobAsync(string jobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RadixJobClient.Client.ApiResponse<Status> localVarResponse = await DeleteJobWithHttpInfoAsync(jobName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete job 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">Name of job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Status)</returns>
        public async System.Threading.Tasks.Task<RadixJobClient.Client.ApiResponse<Status>> DeleteJobWithHttpInfoAsync(string jobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
                throw new RadixJobClient.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobApi->DeleteJob");


            RadixJobClient.Client.RequestOptions localVarRequestOptions = new RadixJobClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RadixJobClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixJobClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("jobName", RadixJobClient.Client.ClientUtils.ParameterToString(jobName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Status>("/jobs/{jobName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets job 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">Name of job</param>
        /// <returns>JobStatus</returns>
        public JobStatus GetJob(string jobName)
        {
            RadixJobClient.Client.ApiResponse<JobStatus> localVarResponse = GetJobWithHttpInfo(jobName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets job 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">Name of job</param>
        /// <returns>ApiResponse of JobStatus</returns>
        public RadixJobClient.Client.ApiResponse<JobStatus> GetJobWithHttpInfo(string jobName)
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
                throw new RadixJobClient.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobApi->GetJob");

            RadixJobClient.Client.RequestOptions localVarRequestOptions = new RadixJobClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RadixJobClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixJobClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("jobName", RadixJobClient.Client.ClientUtils.ParameterToString(jobName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<JobStatus>("/jobs/{jobName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets job 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">Name of job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobStatus</returns>
        public async System.Threading.Tasks.Task<JobStatus> GetJobAsync(string jobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RadixJobClient.Client.ApiResponse<JobStatus> localVarResponse = await GetJobWithHttpInfoAsync(jobName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets job 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">Name of job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobStatus)</returns>
        public async System.Threading.Tasks.Task<RadixJobClient.Client.ApiResponse<JobStatus>> GetJobWithHttpInfoAsync(string jobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
                throw new RadixJobClient.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobApi->GetJob");


            RadixJobClient.Client.RequestOptions localVarRequestOptions = new RadixJobClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RadixJobClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixJobClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("jobName", RadixJobClient.Client.ClientUtils.ParameterToString(jobName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<JobStatus>("/jobs/{jobName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets jobs 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;JobStatus&gt;</returns>
        public List<JobStatus> GetJobs()
        {
            RadixJobClient.Client.ApiResponse<List<JobStatus>> localVarResponse = GetJobsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets jobs 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;JobStatus&gt;</returns>
        public RadixJobClient.Client.ApiResponse<List<JobStatus>> GetJobsWithHttpInfo()
        {
            RadixJobClient.Client.RequestOptions localVarRequestOptions = new RadixJobClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RadixJobClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixJobClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<JobStatus>>("/jobs/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets jobs 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JobStatus&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobStatus>> GetJobsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RadixJobClient.Client.ApiResponse<List<JobStatus>> localVarResponse = await GetJobsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets jobs 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JobStatus&gt;)</returns>
        public async System.Threading.Tasks.Task<RadixJobClient.Client.ApiResponse<List<JobStatus>>> GetJobsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RadixJobClient.Client.RequestOptions localVarRequestOptions = new RadixJobClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RadixJobClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixJobClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<JobStatus>>("/jobs/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop job 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">Name of job</param>
        /// <returns>Status</returns>
        public Status StopJob(string jobName)
        {
            RadixJobClient.Client.ApiResponse<Status> localVarResponse = StopJobWithHttpInfo(jobName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stop job 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">Name of job</param>
        /// <returns>ApiResponse of Status</returns>
        public RadixJobClient.Client.ApiResponse<Status> StopJobWithHttpInfo(string jobName)
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
                throw new RadixJobClient.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobApi->StopJob");

            RadixJobClient.Client.RequestOptions localVarRequestOptions = new RadixJobClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RadixJobClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixJobClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("jobName", RadixJobClient.Client.ClientUtils.ParameterToString(jobName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Status>("/jobs/{jobName}/stop", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop job 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">Name of job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Status</returns>
        public async System.Threading.Tasks.Task<Status> StopJobAsync(string jobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RadixJobClient.Client.ApiResponse<Status> localVarResponse = await StopJobWithHttpInfoAsync(jobName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stop job 
        /// </summary>
        /// <exception cref="RadixJobClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">Name of job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Status)</returns>
        public async System.Threading.Tasks.Task<RadixJobClient.Client.ApiResponse<Status>> StopJobWithHttpInfoAsync(string jobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
                throw new RadixJobClient.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobApi->StopJob");


            RadixJobClient.Client.RequestOptions localVarRequestOptions = new RadixJobClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RadixJobClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixJobClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("jobName", RadixJobClient.Client.ClientUtils.ParameterToString(jobName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Status>("/jobs/{jobName}/stop", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
