apiVersion: radix.equinor.com/v1
kind: RadixApplication
metadata:
  name: radix-job-demo
spec:
  build:
    useBuildKit: true
  dnsAppAlias:
    environment: qa
    component: server
  environments:
    - name: dev
      build:
        from: main
    - name: qa
      build:
        from: main
    - name: prod
      build:
        from: release
  jobs:
    - name: "compute"
      src: "compute"
      schedulerPort: 8080
      timeLimitSeconds: 300
      backoffLimit: 0
      ports:
        - name: http
          port: 9999
        - name: metrics2
          port: 9090
      monitoringConfig:
        portName: metrics2
      payload:
        path: "/compute/args"
      identity:
        azure:
          clientId: 5e48ca1f-a2bf-4dec-b96d-bbf8ce69f9f6
      variables:
        COMPUTE_CONFIG: "/compute/args/payload"
        CALLBACK_ON_COMPLETE_URL: "http://server:5005"
        SQL_SERVER_NAME: "fed-test.database.windows.net"
        SQL_DATABASE_NAME: "fed-test"
      environmentConfig:
        - environment: prod
          identity:
            azure:
              clientId: b96d264b-7053-4465-a4a7-32be5b0fec49
        - environment: qa
          monitoring: true
          backoffLimit: 0
    - name: compute2
      src: compute2
      schedulerPort: 8080
    - name: computex
      src: compute
      schedulerPort: 8080
  components:
    - name: "server"
      src: src
      dockerfileName: Dockerfile.frontend
      identity:
        azure:
          clientId: 5e48ca1f-a2bf-4dec-b96d-bbf8ce69f9f6
      variables:
        ASPNETCORE_URLS: "http://*:5005"
        JOB_SCHEDULER: "http://compute:8080"
        COMPUTE_IMAGE_PATH: "/app/computeimages"
      authentication:
        oauth2:
          clientId: 5e48ca1f-a2bf-4dec-b96d-bbf8ce69f9f6
          scope: openid email profile offline_access
          sessionStoreType: redis
          redisStore:
            connectionUrl: redis://redis:6379
      ports:
        - name: http
          port: 5005
      publicPort: http
      ingressConfiguration:
        - stickysessions
      resources:
        requests:
          memory: "201M"
          cpu: "50m"
        limits:
          memory: "500M"
    - name: redis
      image: bitnami/redis:{imageTagName}
      environmentConfig:
        - environment: dev
          imageTagName: "7.2"
        - environment: prod
          imageTagName: "7.0"
      alwaysPullImageOnDeploy: true
      ports:
        - name: redis
          port: 6379
      secrets:
        - REDIS_PASSWORD
      resources:
        requests:
          memory: "100M"
          cpu: "50m"
        limits:
          memory: "200M"

