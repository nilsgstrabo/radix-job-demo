# yaml-language-server: $schema=file:///home/nst/go/src/github.com/equinor/radix-operator/json-schema/radixapplication.json

apiVersion: radix.equinor.com/v1
kind: RadixApplication
metadata:
  name: radix-job-demo
spec:
  dnsAppAlias:
    environment: qa
    component: server
  build:
    useBuildKit: true
    useBuildCache: true
    secrets:
      - SECRET1
  environments:
    - name: qa
      build:
        from: main
    - name: prod
      build:
        from: release
  jobs:
    - name: "compute"
      src: "compute"
      schedulerPort: 8080
      timeLimitSeconds: 3600
      backoffLimit: 0
      runtime:
        architecture: amd64
      notifications:
        webhook: http://server:6001/api/notification/compute1
      # failurePolicy:
      #   rules:
      #     - action: FailJob
      #       onExitCodes:
      #         operator: In
      #         values: [1]
      #     - action: Count
      #       onExitCodes:
      #         operator: In
      #         values: [10,11]
      #     - action: Ignore
      #       onExitCodes:
      #         operator: In
      #         values: [20,21,22]
      readOnlyFileSystem: true
      resources:
        requests:
          cpu: 50m
          memory: 100Mi
      ports:
        - name: http
          port: 9999
        - name: metrics2
          port: 9090
      monitoringConfig:
        portName: metrics2
      payload:
        path: "/compute/args"
      identity:
        azure:
          clientId: 5e48ca1f-a2bf-4dec-b96d-bbf8ce69f9f6
      variables:
        COMPUTE_CONFIG: "/compute/args/payload"
        CALLBACK_ON_COMPLETE_URL: "http://server:5000"
        SQL_SERVER_NAME: "fed-test.database.windows.net"
        SQL_DATABASE_NAME: "fed-test"
      environmentConfig:
        - environment: prod
          identity:
            azure:
              clientId: b96d264b-7053-4465-a4a7-32be5b0fec49
        - environment: qa
          # failurePolicy:
          #   rules:
          #     - action: FailJob
          #       onExitCodes:
          #         operator: In
          #         values: [42]
          #     - action: Count
          #       onExitCodes:
          #         operator: In
          #         values: [1, 2, 3]
          #     - action: Ignore
          #       onExitCodes:
          #         operator: In
          #         values: [143]
          monitoring: true
          backoffLimit: 0
          readOnlyFileSystem: true
    - name: "compute1"
      src: "compute"
      schedulerPort: 8080
      timeLimitSeconds: 3600
      backoffLimit: 0
      runtime:
        architecture: amd64
      notifications:
        webhook: http://server:6001/api/notification/compute1
      readOnlyFileSystem: true
      ports:
        - name: http
          port: 9999
        - name: metrics2
          port: 9090
      monitoringConfig:
        portName: metrics2
      payload:
        path: "/compute/args"
      identity:
        azure:
          clientId: 5e48ca1f-a2bf-4dec-b96d-bbf8ce69f9f6
      variables:
        COMPUTE_CONFIG: "/compute/args/payload"
        CALLBACK_ON_COMPLETE_URL: "http://server:5000"
        SQL_SERVER_NAME: "fed-test.database.windows.net"
        SQL_DATABASE_NAME: "fed-test"
      environmentConfig:
        - environment: qa
          monitoring: true
          backoffLimit: 0
        - environment: prod
          identity:
            azure:
              clientId: b96d264b-7053-4465-a4a7-32be5b0fec49
    - name: "compute2"
      src: "compute"
      schedulerPort: 8080
      timeLimitSeconds: 300
      backoffLimit: 0
      runtime:
        architecture: amd64
      payload:
        path: "/compute/args"
      identity:
        azure:
          clientId: 5e48ca1f-a2bf-4dec-b96d-bbf8ce69f9f6
      variables:
        COMPUTE_CONFIG: "/compute/args/payload"
        CALLBACK_ON_COMPLETE_URL: "http://server:5000"
        SQL_SERVER_NAME: "fed-test.database.windows.net"
        SQL_DATABASE_NAME: "fed-test"
  components:
    - name: echo
      src: echoweb
      dockerfileName: Dockerfile
      ports:
        - name: http
          port: 8000
      publicPort: http
      runtime:
        architecture: amd64
      readOnlyFileSystem: true
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
        limits:
          cpu: 10m
          memory: 20Mi
    - name: "server"
      src: src
      dockerfileName: Dockerfile.frontend
      ports:
        - name: http
          port: 5000
        - name: notif1
          port: 6001
        - name: notif2
          port: 6002
      publicPort: http
      readOnlyFileSystem: true
      ingressConfiguration:
        - stickysessions
      runtime:
        architecture: amd64
      variables:
        ASPNETCORE_URLS: "http://*:5000;http://*:6001;http://*:6002"
        JOB_SCHEDULER: "http://compute:8080"
        JOB_SCHEDULER2: "http://compute2:8080"
        COMPUTE_IMAGE_PATH: "/app/computeimages"
        DOTNET_EnableDiagnostics: "0"
      network:
        ingress:
          public:
            proxyReadTimeout: 10
            proxySendTimeout: 10
      identity:
        azure:
          clientId: 5e48ca1f-a2bf-4dec-b96d-bbf8ce69f9f6
      authentication:
        oauth2:
          clientId: 5e48ca1f-a2bf-4dec-b96d-bbf8ce69f9f6
          scope: openid email profile offline_access
          sessionStoreType: redis
          redisStore:
            connectionUrl: redis://redis:6379
      resources:
        requests:
          memory: "200M"
          cpu: "50m"
        limits:
          memory: "500M"
      volumeMounts:
        - name: computeimages
          path: /app/computeimages
          emptyDir:
            sizeLimit: 50M
    - name: redis
      runtime:
        architecture: amd64
      image: bitnami/redis:{imageTagName}
      imageTagName: "8.0.2"
      alwaysPullImageOnDeploy: true
      ports:
        - name: redis
          port: 6379
      secrets:
        - REDIS_PASSWORD
      resources:
        requests:
          memory: "100M"
          cpu: "50m"
        limits:
          memory: "200M"

